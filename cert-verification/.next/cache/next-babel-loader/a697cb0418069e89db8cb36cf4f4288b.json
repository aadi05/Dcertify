{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/aditya/Documents/projects/final_year_project/cert-verification/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport DigitalCertificationInstance from '../instances/DigitalCertificationInstance';\nimport { Statistic, Form, Button, Input, Message, Icon, Table } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\n\nvar SHA256 = require(\"crypto-js/sha256\");\n\nvar MerkleTools = require('merkle-tools');\n\nimport web3 from '../instances/web3';\nvar statisticStyle = {\n  margin: \"25px 25px 25px 25px\"\n};\nvar formStyle = {\n  fontSize: \"25px\"\n};\n\nvar Dcertify =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dcertify, _Component);\n\n  function Dcertify() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dcertify);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dcertify)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      candidateID: \"\",\n      verificationStatus: false,\n      tableStatus: false,\n      buttonStatus: true,\n      messageHeader: \"Verification Failed\",\n      messageContent: \"Certificate doesn't exist!\",\n      messageColor: \"red\",\n      fullName: \"\",\n      degreeName: \"\",\n      courseName: \"\",\n      collegeName: \"\",\n      classCategory: \"\",\n      organizationName: \"\",\n      dob: \"\",\n      issueDate: \"\",\n      buttonText: \"View Certificate\",\n      certificateStatus: false,\n      buttonTwoText: \"View raw data\",\n      certData: \"\",\n      merkleRoot: \"\",\n      merkleProof: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitVerify\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var certificateHash, merkleTools, isValid, revokeStatus, merkleStatus;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                certificateHash = SHA256(_this.state.certData).toString();\n                console.log(certificateHash);\n                console.log(_this.state.certData);\n                merkleTools = new MerkleTools();\n                isValid = merkleTools.validateProof(_this.state.merkleProof, certificateHash, _this.state.merkleRoot);\n                console.log(isValid);\n                console.log(isValid);\n\n                if (isValid) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _this.setState({\n                  messageHeader: \"Verification Failed\",\n                  verificationStatus: true,\n                  buttonStatus: true,\n                  messageContent: \"Certificate doesn't exist!\",\n                  messageColor: \"red\",\n                  tableStatus: false,\n                  certificateStatus: false\n                });\n\n                return _context.abrupt(\"return\");\n\n              case 11:\n                console.log(\"separator______\");\n\n                _this.setState({\n                  tableStatus: false,\n                  certificateStatus: false,\n                  buttonText: \"View Certificate\",\n                  buttonTwoText: \"View raw data\"\n                });\n\n                _context.prev = 13;\n                _context.next = 16;\n                return DigitalCertificationInstance.methods.checkRevokeStatus(certificateHash).call();\n\n              case 16:\n                revokeStatus = _context.sent;\n                console.log(revokeStatus);\n\n                if (revokeStatus) {\n                  _context.next = 33;\n                  break;\n                }\n\n                _context.prev = 19;\n                _context.next = 22;\n                return DigitalCertificationInstance.methods.checkMerkleRoot(_this.state.merkleRoot).call();\n\n              case 22:\n                merkleStatus = _context.sent;\n                console.log(\"merkleStatus\" + merkleStatus);\n\n                if (!merkleStatus) {\n                  _context.next = 27;\n                  break;\n                }\n\n                _this.setState({\n                  messageHeader: \"Verification Status\",\n                  verificationStatus: true,\n                  buttonStatus: false,\n                  messageContent: \"Certificate verified successfully!\",\n                  messageColor: \"green\"\n                });\n\n                return _context.abrupt(\"return\");\n\n              case 27:\n                _context.next = 33;\n                break;\n\n              case 29:\n                _context.prev = 29;\n                _context.t0 = _context[\"catch\"](19);\n\n                _this.setState({\n                  messageHeader: \"Verification Failed\",\n                  verificationStatus: true,\n                  buttonStatus: true,\n                  messageContent: \"Try again later!\",\n                  messageColor: \"red\",\n                  tableStatus: false,\n                  certificateStatus: false\n                });\n\n                return _context.abrupt(\"return\");\n\n              case 33:\n                _this.setState({\n                  messageHeader: \"Verification Failed\",\n                  verificationStatus: true,\n                  buttonStatus: true,\n                  messageContent: \"This certificate is revoked. Please contact concerned authorities for more information\",\n                  messageColor: \"red\",\n                  tableStatus: false,\n                  certificateStatus: false\n                });\n\n                return _context.abrupt(\"return\");\n\n              case 37:\n                _context.prev = 37;\n                _context.t1 = _context[\"catch\"](13);\n                console.log(_context.t1);\n\n                _this.setState({\n                  messageHeader: \"Verification Failed\",\n                  verificationStatus: true,\n                  buttonStatus: true,\n                  messageContent: \"Try again later!\",\n                  messageColor: \"red\",\n                  tableStatus: false,\n                  certificateStatus: false\n                });\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[13, 37], [19, 29]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"setValues\", function (obj) {\n      var data = obj.CertificateData;\n\n      var issueD = _this.convertDate(obj.Metadata.datetime);\n\n      var cert = _JSON$stringify(data);\n\n      _this.setState({\n        candidateID: data.ID,\n        degreeName: data.Degree,\n        fullName: data.Name,\n        courseName: data.Course,\n        organizationName: data.Organization,\n        dob: data.DOB,\n        classCategory: data.ClassCategory,\n        collegeName: data.College,\n        issueDate: issueD,\n        merkleProof: obj.MerkleProof,\n        merkleRoot: obj.MerkleRoot,\n        certData: cert\n      });\n\n      console.log(_this.state);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFile\", function (selectorFiles) {\n      var reader = new FileReader();\n      reader.onload = _this.onReaderLoad;\n      reader.readAsText(selectorFiles[0]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onReaderLoad\", function (event) {\n      var obj = JSON.parse(event.target.result);\n\n      _this.setValues(obj);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showHideRawData\", function () {\n      if (_this.state.tableStatus == true) {\n        _this.setState({\n          tableStatus: false,\n          certificateStatus: false,\n          buttonTwoText: \"View raw data\"\n        });\n      } else {\n        _this.setState({\n          tableStatus: true,\n          certificateStatus: false,\n          buttonTwoText: \"Hide raw data\",\n          buttonText: \"View Certificate\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showHideCertificate\", function () {\n      if (_this.state.certificateStatus == true) {\n        _this.setState({\n          certificateStatus: false,\n          tableStatus: false,\n          buttonText: \"View Certificate\"\n        });\n      } else {\n        _this.setState({\n          certificateStatus: true,\n          tableStatus: false,\n          buttonText: \"Hide Certificate\",\n          buttonTwoText: \"View raw data\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertDate\", function (inpTime) {\n      var months_arr = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      var date = new Date(inpTime * 1000);\n      var year = date.getFullYear();\n      var month = months_arr[date.getMonth()];\n      var day = date.getDate();\n      return month + \" \" + day + \",\" + year;\n    });\n\n    return _this;\n  }\n\n  _createClass(Dcertify, [{\n    key: \"statisticComponent\",\n    value: function statisticComponent() {\n      var stat = __jsx(Statistic, {\n        floated: \"right\",\n        style: statisticStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, __jsx(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, this.props.totalCertificates), __jsx(\"div\", {\n        className: \"label\",\n        style: {\n          marginTop: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Certificates Issued So Far\"));\n\n      return stat;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, this.statisticComponent(), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(Form, {\n        onSubmit: this.onSubmitVerify,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, __jsx(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        style: {\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Verify Certificate\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), __jsx(Input, {\n        type: \"file\",\n        labelPosition: \"right\",\n        style: formStyle,\n        onChange: function onChange(event) {\n          return _this2.handleFile(event.target.files);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), __jsx(Button, {\n        type: \"submit\",\n        fluid: true,\n        primary: true,\n        style: {\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Verify\"), __jsx(Message, {\n        floating: true,\n        color: this.state.messageColor,\n        hidden: !this.state.verificationStatus,\n        header: this.state.messageHeader,\n        content: this.state.messageContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), __jsx(Button, {\n        hidden: this.state.buttonStatus,\n        onClick: this.showHideCertificate,\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.state.buttonText), __jsx(Button, {\n        style: {\n          marginLeft: \"15px\"\n        },\n        hidden: this.state.buttonStatus,\n        onClick: this.showHideRawData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.state.buttonTwoText), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        hidden: !this.state.certificateStatus,\n        style: {\n          margin: \"auto\",\n          width: \"800px\",\n          height: \"600px\",\n          padding: \"20px\",\n          textAlign: \"center\",\n          border: \"10px solid #787878\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          width: \"750px\",\n          height: \"550px\",\n          padding: \"20px\",\n          textAlign: \"center\",\n          border: \"5px solid #787878\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, __jsx(Icon, {\n        name: \"certificate\",\n        color: \"yellow\",\n        size: \"huge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), __jsx(\"h1\", {\n        style: {\n          fonSize: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, __jsx(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Certificate of Completion\")), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"25px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"This is to certify that\")), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"25px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, __jsx(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, this.state.fullName)), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"25px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"has completed the course\")), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, this.state.degreeName, \" in \", this.state.courseName), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"with \", __jsx(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, this.state.classCategory, \" class\")), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"25px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"dated\")), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.convertDate(this.state.issueDate)))), __jsx(Table, {\n        hidden: !this.state.tableStatus,\n        color: \"green\",\n        key: \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, __jsx(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, __jsx(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Name\"), __jsx(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, this.state.fullName))), __jsx(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Degree\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, this.state.degreeName)), __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Course Name\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, this.state.courseName)), __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Class\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, this.state.classCategory)), __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"College\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, this.state.collegeName)), __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Organization\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, this.state.organizationName)), __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"Date of Birth\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.convertDate(this.state.dob))), __jsx(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Issue Date\"), __jsx(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, this.convertDate(this.state.issueDate))))), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var manager, totalCertificates;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return DigitalCertificationInstance.methods.manager().call();\n\n              case 2:\n                manager = _context2.sent;\n                _context2.next = 5;\n                return DigitalCertificationInstance.methods.totalCertificatesIssued().call();\n\n              case 5:\n                totalCertificates = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  manager: manager,\n                  totalCertificates: totalCertificates\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Dcertify;\n}(Component);\n\nexport default Dcertify;","map":{"version":3,"sources":["/home/aditya/Documents/projects/final_year_project/cert-verification/pages/index.js"],"names":["React","Component","DigitalCertificationInstance","Statistic","Form","Button","Input","Message","Icon","Table","Layout","SHA256","require","MerkleTools","web3","statisticStyle","margin","formStyle","fontSize","Dcertify","candidateID","verificationStatus","tableStatus","buttonStatus","messageHeader","messageContent","messageColor","fullName","degreeName","courseName","collegeName","classCategory","organizationName","dob","issueDate","buttonText","certificateStatus","buttonTwoText","certData","merkleRoot","merkleProof","event","preventDefault","certificateHash","state","toString","console","log","merkleTools","isValid","validateProof","setState","methods","checkRevokeStatus","call","revokeStatus","checkMerkleRoot","merkleStatus","obj","data","CertificateData","issueD","convertDate","Metadata","datetime","cert","ID","Degree","Name","Course","Organization","DOB","ClassCategory","College","MerkleProof","MerkleRoot","selectorFiles","reader","FileReader","onload","onReaderLoad","readAsText","JSON","parse","target","result","setValues","inpTime","months_arr","date","Date","year","getFullYear","month","getMonth","day","getDate","stat","props","totalCertificates","marginTop","statisticComponent","onSubmitVerify","handleFile","files","showHideCertificate","marginLeft","showHideRawData","width","height","padding","textAlign","border","fonSize","manager","totalCertificatesIssued"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport DigitalCertificationInstance from '../instances/DigitalCertificationInstance';\nimport { Statistic, Form, Button, Input, Message, Icon, Table} from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nconst SHA256 = require(\"crypto-js/sha256\");\nconst MerkleTools = require('merkle-tools');\nimport web3 from '../instances/web3';\n\nconst statisticStyle = {\n    margin:\"25px 25px 25px 25px\"\n};\n\nconst formStyle = {\n    fontSize:\"25px\"\n}\n\nclass Dcertify extends Component{\n\n    state = {\n        candidateID : \"\",\n        verificationStatus:false,\n        tableStatus:false,\n        buttonStatus:true,\n        messageHeader:\"Verification Failed\",\n        messageContent:\"Certificate doesn't exist!\",\n        messageColor:\"red\",\n        fullName:\"\",\n        degreeName:\"\",\n        courseName:\"\",\n        collegeName:\"\",\n        classCategory:\"\",\n        organizationName:\"\",\n        dob:\"\",\n        issueDate:\"\",\n        buttonText:\"View Certificate\",\n        certificateStatus:false,\n        buttonTwoText:\"View raw data\",\n        certData:\"\",\n        merkleRoot:\"\",\n        merkleProof: []\n\n    };\n\n    static async getInitialProps(){\n        const manager = await DigitalCertificationInstance.methods.manager().call();\n        const totalCertificates = await DigitalCertificationInstance.methods.totalCertificatesIssued().call();\n\n        return {manager:manager,totalCertificates:totalCertificates};\n    }\n    onSubmitVerify = async (event) => {\n        event.preventDefault();\n\n        const certificateHash = SHA256(this.state.certData).toString();\n        console.log(certificateHash);\n        console.log(this.state.certData);\n        const merkleTools = new MerkleTools();\n        const isValid = merkleTools.validateProof(this.state.merkleProof,certificateHash,this.state.merkleRoot);\n        console.log(isValid);\n        console.log(isValid);\n        if(!isValid){\n            this.setState({messageHeader:\"Verification Failed\",verificationStatus:true,buttonStatus:true,\n                        messageContent:\"Certificate doesn't exist!\",messageColor:\"red\",tableStatus:false,certificateStatus:false});\n            return;\n        }\n\n        console.log(\"separator______\");\n\n        this.setState({tableStatus:false,certificateStatus:false,buttonText:\"View Certificate\",buttonTwoText:\"View raw data\"});\n\n        try{\n            const revokeStatus = await DigitalCertificationInstance.methods.checkRevokeStatus(certificateHash).call();\n            console.log(revokeStatus);\n            if(!revokeStatus){\n                try{\n                    const merkleStatus = await DigitalCertificationInstance.methods.checkMerkleRoot(this.state.merkleRoot).call();\n                    console.log(\"merkleStatus\"+merkleStatus);\n                    if(merkleStatus){\n                        this.setState({messageHeader:\"Verification Status\",verificationStatus:true,buttonStatus:false,\n                            messageContent:\"Certificate verified successfully!\",messageColor:\"green\"});\n                        return;\n                    }\n                }\n                catch(err){\n                    this.setState({messageHeader:\"Verification Failed\",verificationStatus:true,buttonStatus:true,\n                        messageContent:\"Try again later!\",messageColor:\"red\",tableStatus:false,certificateStatus:false});\n                    return;\n                }\n            }\n            this.setState({messageHeader:\"Verification Failed\",verificationStatus:true,buttonStatus:true,\n                        messageContent:\"This certificate is revoked. Please contact concerned authorities for more information\",messageColor:\"red\",tableStatus:false,certificateStatus:false});\n            return;\n        }\n        catch(err){\n            console.log(err);\n            this.setState({messageHeader:\"Verification Failed\",verificationStatus:true,buttonStatus:true,\n                        messageContent:\"Try again later!\",messageColor:\"red\",tableStatus:false,certificateStatus:false});\n        }\n\n\n    };\n\n    setValues = (obj) => {\n        const data = obj.CertificateData;\n        const issueD = this.convertDate(obj.Metadata.datetime)\n        const cert = JSON.stringify(data);\n        this.setState({candidateID:data.ID,degreeName:data.Degree,fullName:data.Name,courseName:data.Course,organizationName:data.Organization,\n            dob:data.DOB,classCategory:data.ClassCategory,collegeName:data.College,issueDate:issueD,merkleProof:obj.MerkleProof,merkleRoot:obj.MerkleRoot,certData:cert});\n        console.log(this.state);\n\n    }\n\n    handleFile = (selectorFiles) => {\n        const reader = new FileReader();\n        reader.onload = this.onReaderLoad;\n        reader.readAsText(selectorFiles[0]);\n    }\n\n    onReaderLoad = (event) => {\n        var obj = JSON.parse(event.target.result);\n        this.setValues(obj);\n        \n    }\n\n    showHideRawData = () => {\n        if(this.state.tableStatus == true){\n            this.setState({tableStatus:false,certificateStatus:false,buttonTwoText:\"View raw data\"});\n        }\n        else{\n            this.setState({tableStatus:true,certificateStatus:false,buttonTwoText:\"Hide raw data\",buttonText:\"View Certificate\"});\n        }\n\n    }\n\n    showHideCertificate = () => {\n        if(this.state.certificateStatus == true){\n            this.setState({certificateStatus:false,tableStatus:false,buttonText:\"View Certificate\"});\n        }\n        else{\n            this.setState({certificateStatus:true,tableStatus:false,buttonText:\"Hide Certificate\",buttonTwoText:\"View raw data\"});\n        }\n\n    }\n\n    convertDate = (inpTime) => {\n        const months_arr = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n        const date = new Date(inpTime*1000);\n        const year = date.getFullYear();\n        const month = months_arr[date.getMonth()];\n        const day = date.getDate();\n\n        return (month+\" \"+day+\",\"+year);\n    }\n\n    statisticComponent(){\n        const stat = <Statistic floated=\"right\" style={statisticStyle}>\n                        <Statistic.Value>{this.props.totalCertificates}</Statistic.Value>\n                        <div className=\"label\" style={{marginTop:\"10px\"}}>Certificates Issued So Far</div>\n                    </Statistic>\n        return stat;\n    }\n\n    render(){\n        return  (<Layout>\n                {this.statisticComponent()}<br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n                <Form onSubmit={this.onSubmitVerify}>\n                    <Form.Field>\n                    <label style={{fontSize:\"20px\"}}>Verify Certificate</label><br></br>\n                    <Input type=\"file\" labelPosition=\"right\" style={formStyle}\n                     onChange={event =>this.handleFile(event.target.files)} />\n                    </Form.Field>\n                    <Button type='submit' fluid primary style={{fontSize:\"20px\"}}>Verify</Button>\n                    <Message floating color={this.state.messageColor} hidden={!this.state.verificationStatus} header={this.state.messageHeader} content={this.state.messageContent}></Message>\n                </Form>\n                <br></br><br></br>\n                <Button hidden={this.state.buttonStatus} onClick={this.showHideCertificate} primary>{this.state.buttonText}</Button>\n                <Button style={{marginLeft:\"15px\"}} hidden={this.state.buttonStatus} onClick={this.showHideRawData}>{this.state.buttonTwoText}</Button>\n                <br></br><br></br>\n                <div hidden={!this.state.certificateStatus} style={{margin:\"auto\", width:\"800px\",height:\"600px\",padding:\"20px\",textAlign:\"center\", border:\"10px solid #787878\"}}>\n                <div style={{width:\"750px\", height:\"550px\", padding:\"20px\", textAlign:\"center\", border: \"5px solid #787878\"}}>\n                    <Icon name=\"certificate\" color='yellow' size=\"huge\"/><br></br><h1 style={{fonSize:\"50px\"}}><b>Certificate of Completion</b></h1>\n                    <br></br>\n                    <span style={{fontSize:\"25px\"}}><i>This is to certify that</i></span><br></br>\n                    <br></br>\n                    <span style={{fontSize:\"25px\"}}><b>{this.state.fullName}</b></span><br></br><br></br>\n                    <span style={{fontSize:\"25px\"}}><i>has completed the course</i></span><br></br><br></br>\n                    <span style={{fontSize:\"30px\"}}>{this.state.degreeName} in {this.state.courseName}</span> <br></br>\n                    <span style={{fontSize:\"20px\"}}>with <b>{this.state.classCategory} class</b></span> <br></br><br></br>\n                    <span style={{fontSize:\"25px\"}}><i>dated</i></span><br></br>\n                    <span style={{fontSize:\"30px\"}}>{this.convertDate(this.state.issueDate)}</span>\n                </div>\n                </div>\n                <Table hidden={!this.state.tableStatus} color=\"green\" key=\"blue\">\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Name</Table.HeaderCell>\n                            <Table.HeaderCell>{this.state.fullName}</Table.HeaderCell>\n                        </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                        <Table.Row>\n                            <Table.Cell>Degree</Table.Cell>\n                            <Table.Cell>{this.state.degreeName}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Course Name</Table.Cell>\n                            <Table.Cell>{this.state.courseName}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Class</Table.Cell>\n                            <Table.Cell>{this.state.classCategory}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>College</Table.Cell>\n                            <Table.Cell>{this.state.collegeName}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Organization</Table.Cell>\n                            <Table.Cell>{this.state.organizationName}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Date of Birth</Table.Cell>\n                            <Table.Cell>{this.convertDate(this.state.dob)}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Issue Date</Table.Cell>\n                            <Table.Cell>{this.convertDate(this.state.issueDate)}</Table.Cell>\n                        </Table.Row>\n\n                    </Table.Body>\n                </Table>\n                <br></br><br></br><br></br><br></br>\n                </Layout>\n                );\n    }\n\n}\n\nexport default Dcertify;"]},"metadata":{},"sourceType":"module"}