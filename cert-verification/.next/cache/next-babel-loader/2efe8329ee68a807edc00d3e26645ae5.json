{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/aditya/Documents/projects/final_year_project/cert-verification/pages/admin.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport DigitalCertificationInstance from '../instances/DigitalCertificationInstance';\nimport { Container, Form, Button, Input, Segment, Checkbox, Message } from 'semantic-ui-react';\nimport Head from 'next/head';\nimport { Tab } from 'semantic-ui-react';\nimport AdminHeader from '../components/AdminHeader';\nimport web3 from '../instances/web3';\n\nconst SHA256 = require(\"crypto-js/sha256\");\n\nimport swal from \"sweetalert\";\n\nclass Admin extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      merkleRoot: \"\",\n      creationStatus: false,\n      certificateHash: \"\"\n    });\n\n    _defineProperty(this, \"onSubmitDeploy\", async event => {\n      event.preventDefault();\n      const resultArray = this.state.merkleRoot.split(\"/\");\n      const mRoot = resultArray[0];\n\n      const batchCount = _parseInt(resultArray[1]);\n\n      const accounts = await web3.eth.getAccounts();\n\n      try {\n        const merkleStatus = await DigitalCertificationInstance.methods.checkMerkleRoot(mRoot).call();\n\n        if (merkleStatus) {\n          swal(\"Merkle Root already exists\", mRoot, \"warning\");\n          return;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n\n      try {\n        await DigitalCertificationInstance.methods.storeMerkleRoot(mRoot, batchCount).send({\n          gas: \"1000000\",\n          from: accounts[0]\n        });\n      } catch (err) {\n        console.log(err);\n      }\n\n      this.setState({\n        creationStatus: true\n      });\n      swal(\"Merkle Root Deployed\", mRoot, \"success\");\n    });\n\n    _defineProperty(this, \"setValues\", obj => {\n      const data = obj.CertificateData;\n\n      const cert = _JSON$stringify(data);\n\n      const certiHash = SHA256(cert).toString();\n      this.setState({\n        merkleRoot: obj.MerkleRoot,\n        certificateHash: certiHash\n      });\n    });\n\n    _defineProperty(this, \"handleFile\", selectorFiles => {\n      const reader = new FileReader();\n      reader.onload = this.onReaderLoad;\n      reader.readAsText(selectorFiles[0]);\n    });\n\n    _defineProperty(this, \"onReaderLoad\", event => {\n      var obj = JSON.parse(event.target.result);\n      this.setValues(obj);\n    });\n\n    _defineProperty(this, \"onSubmitRevoke\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      swal({\n        title: \"Are you sure?\",\n        text: \"Once revoked, the certificate will be permanently removed!\",\n        icon: \"warning\",\n        buttons: true,\n        dangerMode: true\n      }).then(async willDelete => {\n        if (willDelete) {\n          swal(\"Certificate succesfully revoked!\", {\n            icon: \"success\"\n          });\n\n          try {\n            await DigitalCertificationInstance.methods.revokeCertificate(this.state.certificateHash).send({\n              gas: \"1000000\",\n              from: accounts[0]\n            });\n            console.log(\"Revoked!\");\n          } catch (err) {\n            console.log(\"revoke unsuccessfull\");\n          }\n        } else {\n          swal(\"Certificate is safe!\");\n        }\n      });\n    });\n\n    _defineProperty(this, \"generateJSX\", __jsx(Segment, {\n      style: {\n        background: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, __jsx(Form, {\n      onSubmit: this.onSubmitDeploy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, __jsx(Form.Field, {\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Merkle Root\"), __jsx(\"input\", {\n      placeholder: \"Merkle Root\",\n      onChange: event => this.setState({\n        merkleRoot: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), __jsx(Button, {\n      loading: this.state.loading,\n      fluid: true,\n      primary: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Deploy\"))));\n\n    _defineProperty(this, \"revokeJSX\", __jsx(Form, {\n      style: {\n        marginTop: \"10px\"\n      },\n      onSubmit: this.onSubmitRevoke,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      style: {\n        fontSize: \"15px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Revoking certificate will permanently remove the copy of certificate.\"), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), __jsx(Input, {\n      type: \"file\",\n      labelPosition: \"right\",\n      style: {\n        color: \"red\"\n      },\n      onChange: event => this.handleFile(event.target.files),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), __jsx(Button, {\n      type: \"submit\",\n      fluid: true,\n      style: {\n        background: \"red\",\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Revoke\")));\n\n    _defineProperty(this, \"panes\", [{\n      menuItem: 'Deploy Merkle root',\n      render: () => __jsx(Tab.Pane, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.generateJSX)\n    }, {\n      menuItem: 'Revoke Certificate',\n      render: () => __jsx(Tab.Pane, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, this.revokeJSX)\n    }, {\n      menuItem: 'Create Account',\n      render: () => __jsx(Tab.Pane, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Unimplemented\")\n    }]);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, __jsx(AdminHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), __jsx(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), __jsx(\"style\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, 'body { background-color: \"white\"; }')), __jsx(Tab, {\n      panes: this.panes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Admin;","map":{"version":3,"sources":["/home/aditya/Documents/projects/final_year_project/cert-verification/pages/admin.js"],"names":["React","Component","DigitalCertificationInstance","Container","Form","Button","Input","Segment","Checkbox","Message","Head","Tab","AdminHeader","web3","SHA256","require","swal","Admin","merkleRoot","creationStatus","certificateHash","event","preventDefault","resultArray","state","split","mRoot","batchCount","accounts","eth","getAccounts","merkleStatus","methods","checkMerkleRoot","call","err","console","log","storeMerkleRoot","send","gas","from","setState","obj","data","CertificateData","cert","certiHash","toString","MerkleRoot","selectorFiles","reader","FileReader","onload","onReaderLoad","readAsText","JSON","parse","target","result","setValues","title","text","icon","buttons","dangerMode","then","willDelete","revokeCertificate","background","onSubmitDeploy","value","loading","marginTop","onSubmitRevoke","fontSize","color","handleFile","files","menuItem","render","generateJSX","revokeJSX","panes"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport DigitalCertificationInstance from '../instances/DigitalCertificationInstance';\nimport {Container, Form, Button, Input, Segment, Checkbox, Message} from 'semantic-ui-react';\nimport Head from 'next/head';\nimport { Tab } from 'semantic-ui-react';\nimport AdminHeader from '../components/AdminHeader';\nimport web3 from '../instances/web3';\nconst SHA256 = require(\"crypto-js/sha256\");\nimport swal from \"sweetalert\";\n\nclass Admin extends Component{\n\n    state={\n        merkleRoot:\"\",\n        creationStatus:false,\n        certificateHash:\"\"\n    };\n\n    onSubmitDeploy = async (event) => {\n        event.preventDefault();\n        const resultArray = this.state.merkleRoot.split(\"/\");\n        const mRoot = resultArray[0];\n        const batchCount = parseInt(resultArray[1]);\n\n        const accounts = await web3.eth.getAccounts();\n        try{\n          const merkleStatus = await DigitalCertificationInstance.methods.checkMerkleRoot(mRoot).call();\n          if(merkleStatus){\n            swal(\"Merkle Root already exists\",mRoot,\"warning\");\n            return;\n          }\n        }\n        catch(err){\n          console.log(err);\n        }\n\n        try{\n            await DigitalCertificationInstance.methods.storeMerkleRoot(mRoot,batchCount).send({gas:\"1000000\",from:accounts[0]});\n        }\n        catch(err){\n            console.log(err)\n        }\n        this.setState({creationStatus:true});\n\n        swal(\"Merkle Root Deployed\", mRoot, \"success\");\n\n    };\n\n    setValues = (obj) => {\n      const data = obj.CertificateData;\n      const cert = JSON.stringify(data);\n      const certiHash = SHA256(cert).toString();\n      this.setState({merkleRoot:obj.MerkleRoot,certificateHash:certiHash});\n\n    }\n\n    handleFile = (selectorFiles) => {\n        const reader = new FileReader();\n        reader.onload = this.onReaderLoad;\n        reader.readAsText(selectorFiles[0]);\n    }\n\n    onReaderLoad = (event) => {\n        var obj = JSON.parse(event.target.result);\n        this.setValues(obj);\n        \n    }\n\n    onSubmitRevoke = async (event) => {\n        event.preventDefault();\n\n        const accounts = await web3.eth.getAccounts(); \n\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once revoked, the certificate will be permanently removed!\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n          })\n          .then(async (willDelete) => {\n            if (willDelete) {\n              swal(\"Certificate succesfully revoked!\", {\n                icon: \"success\",\n              });\n              try{\n                await DigitalCertificationInstance.methods.revokeCertificate(this.state.certificateHash).send({\n                    gas:\"1000000\",from:accounts[0]\n                });\n                console.log(\"Revoked!\");\n                }\n                catch(err){\n                    console.log(\"revoke unsuccessfull\");\n                }\n            } else {\n              swal(\"Certificate is safe!\");\n            }\n          });\n        \n    }\n\n    generateJSX = (<Segment style={{background:\"white\"}}>\n                        <Form onSubmit={this.onSubmitDeploy}>\n                            <Form.Field required>\n                            <label>Merkle Root</label>\n                            <input placeholder='Merkle Root'\n                            onChange={event => this.setState({merkleRoot: event.target.value})} />\n                            </Form.Field>\n                            <Button loading={this.state.loading} fluid primary type=\"submit\">Deploy</Button>\n                        </Form>\n                    </Segment>);\n\n    revokeJSX = (<Form style={{marginTop:\"10px\"}} onSubmit={this.onSubmitRevoke}>\n                    <Form.Field>\n                    <label style={{fontSize:\"15px\"}}>Revoking certificate will permanently remove the copy of certificate.</label><br></br>\n                    <Input type=\"file\" labelPosition=\"right\" style={{color:\"red\"}}\n                    onChange={event =>this.handleFile(event.target.files)} />\n                    </Form.Field>\n                    <Button type='submit' fluid style={{background:\"red\",color:\"white\"}}>Revoke</Button>\n                  </Form>);\n\n    panes = [\n        { menuItem: 'Deploy Merkle root', render: () => <Tab.Pane>{this.generateJSX}</Tab.Pane> },\n        { menuItem: 'Revoke Certificate', render: () => <Tab.Pane>{this.revokeJSX}</Tab.Pane> },\n        { menuItem: 'Create Account', render: () => <Tab.Pane>Unimplemented</Tab.Pane> },\n      ]\n\n    render(){\n        return  (<div>\n                <AdminHeader/>\n                <Container>\n                <Head>\n                    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n                    <style>{'body { background-color: \"white\"; }'}</style>\n                </Head>\n                <Tab panes={this.panes}/>\n                </Container>\n                </div>\n                );\n    }\n\n}\n\nexport default Admin;"]},"metadata":{},"sourceType":"module"}